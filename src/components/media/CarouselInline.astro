---
import { Image } from "astro:assets";
import "@fancyapps/ui/dist/fancybox/fancybox.css";
import {ImageMetadata} from "astro";

type Item = { src: any; alt?: string; caption?: string };

export interface Props {
    items?: Item[];
    glob?: string;
    height?: number;
    group?: string;
    autoplayMs?: number | null;
    rounded?: boolean;
    arrows?: boolean;
    dots?: boolean;
    format?: "webp" | "avif" | "png" | "jpeg" | "original";
}

const {
    items = [],
    glob,
    height = 360,
    group = "carousel",
    autoplayMs = 4000,
    rounded = true,
    arrows = true,
    dots = true,
    format = "webp",
} = Astro.props;

let data: { url: string; meta: any; alt: string; caption?: string }[] = [];

if (glob) {
    const mods = import.meta.glob<{ default: ImageMetadata }>(glob);
    const pairs = Object.entries(mods).sort(([a], [b]) => a.localeCompare(b));
    data = await Promise.all(
        pairs.map(async ([, loader]) => {
            const { default: meta } = await loader();
            return { url: meta.src, meta, alt: "", caption: "" };
        })
    );
} else {
    data = items.map((it) => ({
        url: typeof it.src === "string" ? it.src : it.src.src,
        meta: it.src,
        alt: it.alt || "",
        caption: it.caption,
    }));
}
---

<div
        class={`ci-root ${rounded ? "rounded-xl overflow-hidden" : ""}`}
        style={`height:${height}px;`}
        data-ci
        data-group={group}
        data-autoplay={autoplayMs ?? ""}
>
    <div class="ci-slides">
        {data.map((d, i) => (
                <a
                        class="ci-slide"
                        href={d.url}
                        data-fancybox={group}
                        data-caption={d.caption || ""}
                        target="_blank"
                        rel="noreferrer"
                >
                    {typeof d.meta === "object" && "src" in d.meta ? (
                            <Image
                                    format={format === "original" ? undefined : format}
                                    src={d.meta}
                                    alt={d.alt}
                                    loading={i === 0 ? "eager" : "lazy"}
                                    class="ci-img"
                            />
                    ) : (
                            <img src={d.url} alt={d.alt} loading="lazy" class="ci-img" />
                    )}
                    {d.caption && <figcaption class="ci-cap">{d.caption}</figcaption>}
                </a>
        ))}
    </div>
    {arrows && (
            <>
                <button class="ci-nav ci-prev" aria-label="Previous">‹</button>
                <button class="ci-nav ci-next" aria-label="Next">›</button>
            </>
    )}
    {dots && (
            <div class="ci-dots">
                {data.map((_, i) => (
                        <button class={`ci-dot ${i === 0 ? "active" : ""}`} data-i={i} />
                ))}
            </div>
    )}
</div>

<script client:load>
    import { Fancybox } from "@fancyapps/ui/dist/fancybox/";

    // Bind Fancybox once (group-based)
    document.querySelectorAll("[data-ci]").forEach((root) => {
        const group = root.getAttribute("data-group");
        Fancybox.bind(`[data-fancybox="${group}"]`, {
            theme: "auto",
            mainClass: "blog-fancybox",
            Carousel: { transition: "slide" },
            Toolbar: {
                display: {
                    left: [],
                    middle: [],
                    right: ["close"],
                },
            },
        });
    });

    // Minimal carousel logic
    document.querySelectorAll("[data-ci]").forEach((root) => {
        const track = root.querySelector(".ci-slides");
        const slides = Array.from(root.querySelectorAll(".ci-slide"));
        const prevBtn = root.querySelector(".ci-prev");
        const nextBtn = root.querySelector(".ci-next");
        const dots = Array.from(root.querySelectorAll(".ci-dot"));
        let index = 0;
        let timer = null;
        const autoplayMs = Number(root.getAttribute("data-autoplay") || 0);

        function go(to) {
            index = (to + slides.length) % slides.length;
            track.style.transform = `translateX(${-100 * index}%)`;
            dots.forEach((d, i) => d.classList.toggle("active", i === index));
            resetAutoplay();
        }
        function next() {
            go(index + 1);
        }
        function prev() {
            go(index - 1);
        }
        function resetAutoplay() {
            if (!autoplayMs) return;
            clearInterval(timer);
            timer = setInterval(next, autoplayMs);
        }

        nextBtn?.addEventListener("click", (e) => {
            e.stopPropagation();
            next();
        });
        prevBtn?.addEventListener("click", (e) => {
            e.stopPropagation();
            prev();
        });
        dots.forEach((d, i) =>
            d.addEventListener("click", (e) => {
                e.stopPropagation();
                go(i);
            })
        );

        // Swipe support
        let startX = 0;
        let dx = 0;
        root.addEventListener("pointerdown", (e) => {
            startX = e.clientX;
            dx = 0;
            root.setPointerCapture(e.pointerId);
        });
        root.addEventListener("pointermove", (e) => {
            if (!startX) return;
            dx = e.clientX - startX;
        });
        root.addEventListener("pointerup", () => {
            if (Math.abs(dx) > 40) {
                if (dx < 0) next();
                else prev();
            }
            startX = 0;
            dx = 0;
        });

        go(0);
    });
</script>

<style>
    .ci-root {
        position: relative;
        background: #f1f5f9;
    }
    .ci-slides {
        display: flex;
        width: 100%;
        height: 100%;
        transform: translateX(0%);
        transition: transform 400ms ease;
    }
    .ci-slide {
        min-width: 100%;
        height: 100%;
        position: relative;
        display: block;
    }
    .ci-img {
        height: 100%;
        width: 100%;
        object-fit: cover;
        display: block;
    }
    .ci-cap {
        position: absolute;
        left: 0;
        right: 0;
        bottom: 8px;
        padding: 6px 10px;
        font-size: 12px;
        color: white;
        background: linear-gradient(to top, rgba(0, 0, 0, 0.5), transparent);
    }
    .ci-nav {
        position: absolute;
        top: 50%;
        transform: translateY(-50%);
        height: 40px;
        width: 40px;
        border-radius: 999px;
        border: none;
        display: grid;
        place-items: center;
        background: rgba(255, 255, 255, 0.9);
        box-shadow: 0 4px 18px rgba(0, 0, 0, 0.15);
        cursor: pointer;
    }
    .ci-prev {
        left: 10px;
    }
    .ci-next {
        right: 10px;
    }
    .ci-dots {
        position: absolute;
        left: 50%;
        bottom: 10px;
        translate: -50% 0;
        display: flex;
        gap: 6px;
    }
    .ci-dot {
        width: 8px;
        height: 8px;
        border-radius: 999px;
        background: rgba(255, 255, 255, 0.6);
        border: none;
        cursor: pointer;
    }
    .ci-dot.active {
        background: white;
    }
</style>